' Gambas module file

Private NombreProyecto As String = File.Name(FMain.txtProyecto.Text)
Private BaseNombreProyecto As String = File.BaseName(FMain.txtProyecto.Text)
Private RutaProyecto As String = File.Dir(FMain.txtProyecto.Text)
Public sComando As String

Public Sub ExportarBibTeX()

  Dim s As String
  Dim f As ResultField
  Dim aFields As New String[]
  Dim i As Integer
  Dim w As Integer
  Dim tab As String

  Dim sResultado As Result
  Dim filtrarBib As String

  'me aseguro de que la búsqueda se encuentre entre comas
  filtrarBib = "select * from bibtex where id_revista = " & FMain.idMetadatoRevista.Text
  sResultado = m_OnOff_y_Red.meConn.Exec(filtrarBib)

  aFields.Clear
  For Each f In sResultado.Fields
    aFields.Add(f.Name)
    If Len(f.Name) > w Then
      w = Len(f.Name)
    Endif
  Next

  s = "" ' Inicializa la cadena vacía

  While sResultado.Available
    s &= "\n@" & sResultado["cmbTipoDeEntrada"] & "{" & sResultado[aFields[4]] & ",\n"
    For i = 5 To aFields.Max
      If Not IsNull(sResultado[aFields[i]]) And Len(sResultado[aFields[i]]) > 0 Then
        tab = String(w - Len(aFields[i]), " ")
        s &= "  " & aFields[i] & tab & " = {" & sResultado[aFields[i]] & "},\n"
      Endif
    Next

    s &= "}\n"
    sResultado.MoveNext
  Wend

  ' Reemplazos ordenados por longitud descendente de las claves (completo)
  s = Replace(s, "txtBookTitleAddOn", "booktitleaddon")
  s = Replace(s, "txtJournalTitleAddOn", "journaltitleaddon")
  s = Replace(s, "txtMainTitleAddOn", "maintitleaddon")
  s = Replace(s, "txtIssueTitleAddOn", "issuetitleaddon")
  s = Replace(s, "txtEventTitleAddOn", "eventtitleaddon")
  s = Replace(s, "txtBookPagination", "bookpagination")
  s = Replace(s, "txtIndexSortTitle", "indexsorttitle")
  s = Replace(s, "txtShortHandIntro", "shorthandintro")
  s = Replace(s, "cmbEditorTypeC", "editortypec")
  s = Replace(s, "cmbEditorTypeB", "editortypeb")
  s = Replace(s, "cmbEditorTypeA", "editortypea")
  s = Replace(s, "cmbEditorType", "editortype")
  s = Replace(s, "cmbTipoDeTesis", "type")
  s = Replace(s, "cmbOrigLanguage", "origlanguage")
  s = Replace(s, "cmbHyphenation", "hyphenation")
  s = Replace(s, "txtBookAuthor", "bookauthor")
  s = Replace(s, "txtShortAuthor", "shortauthor")
  s = Replace(s, "txtOrigPublisher", "origpublisher")
  s = Replace(s, "txtJournalTitle", "journaltitle")
  s = Replace(s, "txtMainTitle", "maintitle")
  s = Replace(s, "txtBookTitle", "booktitle")
  s = Replace(s, "txtOrigLocation", "origlocation")
  s = Replace(s, "txtIndexTitle", "indextitle")
  s = Replace(s, "txtSubTitle", "subtitle")
  s = Replace(s, "txtTitleAddOn", "titleaddon")
  s = Replace(s, "txtEventTitle", "eventtitle")
  s = Replace(s, "txtIssueTitle", "issuetitle")
  s = Replace(s, "txtShortTitle", "shorttitle")
  s = Replace(s, "txtReprintTitle", "reprinttitle")
  s = Replace(s, "txtPageTotal", "pagetotal")
  s = Replace(s, "txtEntrySubType", "entrysubtype")
  s = Replace(s, "txtForeword", "foreword")
  s = Replace(s, "txtAfterword", "afterword")
  s = Replace(s, "txtPublisher", "publisher")
  s = Replace(s, "txtInstitution", "institution")
  s = Replace(s, "txtTranslator", "translator")
  s = Replace(s, "txtCommentator", "commentator")
  s = Replace(s, "txtIntroduction", "introduction")
  s = Replace(s, "txtAnnotator", "annotator")
  s = Replace(s, "txtAnnotation", "annotation")
  s = Replace(s, "txtHowPublished", "howpublished")
  s = Replace(s, "txtOrganization", "organization")
  s = Replace(s, "txtLandIdOpts", "landidopts")
  s = Replace(s, "txtEntrySet", "entryset")
  s = Replace(s, "txtRelatedString", "relatedstring")
  s = Replace(s, "txtSortTitle", "sorttitle")
  s = Replace(s, "txtSortName", "sortname")
  s = Replace(s, "txtSortYear", "sortyear")
  s = Replace(s, "txtSortHand", "sorthand")
  s = Replace(s, "txtCrossRef", "crossref")
  s = Replace(s, "txtAddendum", "addendum")
  s = Replace(s, "txtXdata", "xdata")
  s = Replace(s, "txtRelated", "related")
  s = Replace(s, "cmbBookPagination", "bookpagination")
  s = Replace(s, "txtNameAddOn", "nameaddon")
  s = Replace(s, "txtVolumes", "volumes")
  s = Replace(s, "txtChapter", "chapter")
  s = Replace(s, "txtLocation", "location")
  s = Replace(s, "txtLanguage", "language")
  s = Replace(s, "cmbLanguage", "language")
  s = Replace(s, "txtEprint", "eprint")
  s = Replace(s, "txtVolume", "volume")
  s = Replace(s, "txtEdition", "edition")
  s = Replace(s, "txtCommentator", "commentator")
  s = Replace(s, "txtTranslator", "translator")
  s = Replace(s, "txtAnnotator", "annotator")
  s = Replace(s, "txtLabel", "label")
  s = Replace(s, "txtPages", "pages")
  s = Replace(s, "txtNumber", "number")
  s = Replace(s, "txtGender", "gender")
  s = Replace(s, "txtHolder", "holder")
  s = Replace(s, "txtAuthor", "author")
  s = Replace(s, "txtEditorC", "editorc")
  s = Replace(s, "txtEditorB", "editorb")
  s = Replace(s, "txtEditorA", "editora")
  s = Replace(s, "txtEditor", "editor")
  s = Replace(s, "txtTitle", "title")
  s = Replace(s, "txtPart", "part")
  s = Replace(s, "txtIssue", "issue")
  s = Replace(s, "txtEventDate", "eventdate")
  s = Replace(s, "txtOrigDate", "origdate")
  s = Replace(s, "txtUrlDate", "urldate")
  s = Replace(s, "txtDate", "date")
  s = Replace(s, "txtYear", "year")
  s = Replace(s, "txtVersion", "version")
  s = Replace(s, "cmbLangId", "langid")
  s = Replace(s, "txtVenue", "venue")
  s = Replace(s, "txtHowPublished", "howpublished")
  s = Replace(s, "txtEid", "eid")
  s = Replace(s, "txtDoi", "doi")
  s = Replace(s, "txtUrl", "url")
  s = Replace(s, "txtIssn", "issn")
  s = Replace(s, "txtIsbn", "isbn")
  s = Replace(s, "txtIsmn", "ismn")
  s = Replace(s, "txtIsrn", "isrn")
  s = Replace(s, "txtIsan", "isan")
  s = Replace(s, "txtIswc", "iswc")
  s = Replace(s, "cmbPubState", "pubstate")
  s = Replace(s, "cmbPagination", "pagination")
  s = Replace(s, "txtAbstract", "abstract")
  s = Replace(s, "txtNote", "note")
  s = Replace(s, "txtLibrary", "library")
  s = Replace(s, "txtFile", "file")
  s = Replace(s, "txtIds", "ids")
  s = Replace(s, "cmbEprintType", "eprinttype")
  s = Replace(s, "cmbRelatedType", "relatedtype")
  s = Replace(s, "txtPreSort", "presort")
  s = Replace(s, "txtSeries", "series")
  s = Replace(s, "txtSortKey", "sortkey")
  s = Replace(s, "txtXref", "xref")
  s = Replace(s, "txtShortHand", "shorthand")
  s = Replace(s, "txtOptions", "options")

  Dim fecha As String

  fecha = Format(Now, "dd/mm/yyyy [hh:nn:ss]")

  s &= "\n\n@Comment{generado con gbpublisher; databaseType:biblatex; fecha de creación: " & fecha & "}"

  Dim outputFile As String
  outputFile = RutaProyecto & "/files/" & BaseNombreProyecto & ".bib"
  File.Save(outputFile, s)

End

Public Sub GenerarPDFlibroMD()

  Dim sSQL As String
  Dim sNombreArchivo As String = NombreProyecto ' nombre del proyecto con extension
  Dim rConsulta As Result

  ' generamos la exportacion del bib
  ExportarBibTeX()
  sSQL = "SELECT * FROM revistas WHERE nombre_archivo = &1"
  rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL, sNombreArchivo)

  ' Verificar que la consulta devolvió resultados
  If rConsulta.Available = 0 Then
    Message.Error("No se encontró información para el proyecto: " & sNombreArchivo)
    Return
  Endif

  ' Obtener CSL
  Dim sCSL As String
  If IsNull(rConsulta!cmbTipoCSL) Or Trim(rConsulta!cmbTipoCSL) = "" Then
    sCSL = "apa.csl"
  Else
    Dim sTextoCompleto As String = Trim(rConsulta!cmbTipoCSL)
    ' Buscar texto entre corchetes
    If InStr(sTextoCompleto, "[") > 0 And InStr(sTextoCompleto, "]") > 0 Then
      sCSL = Replace(Replace(Split(sTextoCompleto, "[")[1], "]", ""), " ", "")
    Else
      sCSL = "apa.csl"
    Endif
  Endif

  ' Verificar si es varios autores para el filtro
  Dim iVariosAutores As Integer = rConsulta!cmbAutoriaLibro

  ' Construir comando pandoc para PDF
  Dim archivos As String[]
  Dim archivo As String
  Dim listaOrdenada As String = ""

  ' Definir orden específico de secciones editoriales
  Dim seccionesEspeciales As String[] = [
    "00-primeras.md",     ' Páginas de cortesía
    "01-portada.md",      ' Portada
    "02-portadilla.md",   ' Portadilla
    "03-legales.md",      ' Página legal
    "04-dedicatoria.md",  ' Dedicatoria (opcional)
    "05-sumario.md"       ' Sumario/índice
  ]

  ' Leer archivos con ruta completa
  archivos = Dir(RutaProyecto &/ "articulos", "*.md")
  Print "Archivos encontrados: " & archivos.Count
  archivos.Sort()

  ' 1. Primero agregar secciones especiales en orden
  For Each archivo In seccionesEspeciales
    If archivos.Exist(archivo) Then
      listaOrdenada &= RutaProyecto &/ "articulos" &/ archivo & " "
    Endif
  Next

  ' 2. Luego agregar el resto del contenido (caps, prólogos, etc.)
  For Each archivo In archivos
    ' Excluir secciones especiales ya procesadas y colofón
    If Not seccionesEspeciales.Exist(archivo) And InStr(archivo, "99-colofon") <> 1 Then
      listaOrdenada &= RutaProyecto &/ "articulos" &/ archivo & " "
    Endif
  Next

  ' Construir comando pandoc completo
  sComando = RutaProyecto &/ BaseNombreProyecto & ".md " & listaOrdenada
  sComando &= " --filter pandoc-crossref"
  sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/sumario-pdf-control.lua"

  If iVariosAutores = 1 Then
    sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/section-refs.lua"
  Endif

  sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/colofon.lua"
  sComando &= " --citeproc"
  sComando &= " --metadata lang=es-ES"
  sComando &= " --metadata-file=" & User.Home & "/.gbadoc/yaml/pdf-libro.yaml"
  sComando &= " --bibliography=" & RutaProyecto &/ "files" &/ BaseNombreProyecto & ".bib"
  sComando &= " --csl=" & User.Home & "/.gbadoc/csl/" & sCSL
  sComando &= " --from markdown+smart"
  sComando &= " --pdf-engine=latexmk"
  sComando &= " --pdf-engine-opt=-lualatex"
  sComando &= " --to pdf"
  sComando &= " --output=" & RutaProyecto &/ "salidas" &/ "pdf" &/ BaseNombreProyecto & ".pdf"
  sComando &= " --resource-path=" & RutaProyecto & ":" & RutaProyecto &/ "articulos" & ":" & RutaProyecto &/ "media" & ":" & RutaProyecto &/ "files"
  sComando &= " --standalone"
  sComando &= " --number-sections"
  sComando &= " --template=" & User.Home & "/.gbadoc/basetex/pdf-libro-md.tex "

  ' Ejecutar pandoc desde el directorio correcto
  FMain.TerminalViewProyecto.Input("cd " & RutaProyecto & " && pandoc " & sComando & "\n")
  Wait 2

  ' Mostrar mensaje de finalización
  Dim ArchivoFinal As String
  ArchivoFinal = RutaProyecto & "/salidas/pdf/" & BaseNombreProyecto & ".pdf"

End

Public Sub GenerarTEXlibroMD()

  Dim sSQL As String
  Dim sNombreArchivo As String = NombreProyecto ' nombre del proyecto con extension
  Dim rConsulta As Result
  Dim sComandoCompleto As String
  Dim ArchivoFinal As String

  ' generamos la exportacion del bib
  ExportarBibTeX()

  sSQL = "SELECT * FROM revistas WHERE nombre_archivo = &1"
  rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL, sNombreArchivo)

  ' Verificar que la consulta devolvió resultados
  If rConsulta.Available = 0 Then
    Message.Error("No se encontró información para el proyecto: " & sNombreArchivo)
    Return
  Endif

  ' Obtener CSL
  Dim sCSL As String
  If IsNull(rConsulta!cmbTipoCSL) Or Trim(rConsulta!cmbTipoCSL) = "" Then
    sCSL = "apa.csl"
  Else
    Dim sTextoCompleto As String = Trim(rConsulta!cmbTipoCSL)
    ' Buscar texto entre corchetes
    If InStr(sTextoCompleto, "[") > 0 And InStr(sTextoCompleto, "]") > 0 Then
      sCSL = Replace(Replace(Split(sTextoCompleto, "[")[1], "]", ""), " ", "")
    Else
      sCSL = "apa.csl"
    Endif
  Endif

  ' Verificar si es varios autores para el filtro
  Dim iVariosAutores As Integer = rConsulta!cmbAutoriaLibro

  sComando = BaseNombreProyecto & ".md articulos/*.md"
  sComando &= " --filter pandoc-crossref"

  ' Condicional para section-refs.lua
  If iVariosAutores = 1 Then
    sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/section-refs.lua"
  Endif

  sComando &= " --citeproc"
  sComando &= " --metadata lang=es-ES"
  sComando &= " --metadata-file=" & User.Home & "/.gbadoc/yaml/pdf-libro.yaml"
  sComando &= " --bibliography=files/" & BaseNombreProyecto & ".bib"
  sComando &= " --csl=" & User.Home & "/.gbadoc/csl/" & sCSL
  sComando &= " --from markdown+smart"
  sComando &= " --template=" & User.Home & "/.gbadoc/basetex/pdf-libro-md.tex"
  sComando &= " --to latex"
  sComando &= " --output=salidas/tex/" & BaseNombreProyecto & ".tex"
  sComando &= " --resource-path=" & RutaProyecto & ":" & RutaProyecto &/ "articulos" & ":" & RutaProyecto &/ "media" & ":" & RutaProyecto &/ "files"
  sComando &= " --standalone"
  sComando &= " --number-sections"

  ' Comando completo con pandoc
  sComandoCompleto = "pandoc " & sComando

  ' Ejecutar pandoc y capturar posibles errores
  FMain.TerminalViewProyecto.Input(sComandoCompleto & "\n")

  ' Esperar un poco más para que se complete el proceso
  Wait 2.0

  ' Verificar si se creó el archivo de salida
  ArchivoFinal = RutaProyecto & "/salidas/tex/" & BaseNombreProyecto & ".tex"

  If Exist(ArchivoFinal) Then
    Message.Info("Archivo LaTeX generado exitosamente: " & ArchivoFinal)
  Else
    Message.Error("El archivo LaTeX no se generó correctamente. Verifica el terminal para más detalles.")
  Endif

End

Public Sub GenerarEPUBlibroMD()

  Dim sSQL As String
  Dim sNombreArchivo As String = NombreProyecto
  Dim rConsulta As Result
  ' Obtener valores de la base de datos
  Dim iVariosAutores As Integer
  Dim sImagenTapa As String
  Dim sCSL As String

  ' generamos la exportacion del bib
  ExportarBibTeX()

  sSQL = "SELECT * FROM revistas WHERE nombre_archivo = &1"
  rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL, sNombreArchivo)

  ' Verificar que la consulta devolvió resultados
  If rConsulta.Available = 0 Then
    Message.Error("No se encontró información para el proyecto: " & sNombreArchivo)
    Return
  Endif

  ' Generamos YAML para el epub
  Dim sYAML As String
  sYAML = ""

  ' Título del libro
  If IsNull(rConsulta!txtRevistaTitulo) Or Trim(rConsulta!txtRevistaTitulo) = "" Then
    Message.Error("El título del libro es obligatorio.")
    Return
  Else
    sYAML &= "title: " & Trim(rConsulta!txtRevistaTitulo) & "\n"
  Endif

  If Not IsNull(rConsulta!txtLibroSubtitulo) And Trim(rConsulta!txtLibroSubtitulo) <> "" Then
    sYAML &= "subtitle: " & Trim(rConsulta!txtLibroSubtitulo) & "\n"
  Endif
  ' Autores del libro
  If Not IsNull(rConsulta!txtLibroAutoria) And Trim(rConsulta!txtLibroAutoria) <> "" Then
    Dim autores As String[] = Split(Trim(rConsulta!txtLibroAutoria), ",")
    sYAML &= "author:\n"
    For Each autor As String In autores
      sYAML &= "  - " & Trim(autor) & "\n"
    Next
  Endif
  ' Subject combinado (palabras clave + género + audiencia)
  Dim aSubjects As New String[]

  ' Agregar palabras clave si existen
  If Not IsNull(rConsulta!txtLibroPalabrasClaveEs) And Trim(rConsulta!txtLibroPalabrasClaveEs) <> "" Then
    Dim palabras As String[] = Split(Trim(rConsulta!txtLibroPalabrasClaveEs), ",")
    For Each palabra As String In palabras
      aSubjects.Add(Trim(palabra))
    Next
  Endif

  ' Agregar género si existe
  If Not IsNull(rConsulta!txtLibroGenero) And Trim(rConsulta!txtLibroGenero) <> "" Then
    aSubjects.Add(Trim(rConsulta!txtLibroGenero))
  Endif

  ' Agregar audiencia si existe
  If Not IsNull(rConsulta!txtLibroAudiencia) And Trim(rConsulta!txtLibroAudiencia) <> "" Then
    aSubjects.Add(Trim(rConsulta!txtLibroAudiencia))
  Endif
  ' Escribir subject solo si hay elementos
  If aSubjects.Count > 0 Then
    sYAML &= "subject:\n"
    For Each item As String In aSubjects
      sYAML &= "  - \"" & item & "\"\n"
    Next
  Endif
  If Not IsNull(rConsulta!txtFechaPublicacion) Or Trim(rConsulta!txtFechaPublicacion) <> "" Then
    sYAML &= "date: " & Trim(rConsulta!txtFechaPublicacion) & "\n"
  Endif
  If Not IsNull(rConsulta!txtRevistaISSN) Or Trim(rConsulta!txtRevistaISSN) <> "" Then
    sYAML &= "isbn: " & Trim(rConsulta!txtRevistaISSN) & "\n"
  Endif
  If Not IsNull(rConsulta!txtRevistaEditorial) Or Trim(rConsulta!txtRevistaEditorial) <> "" Then
    sYAML &= "publisher: " & Trim(rConsulta!txtRevistaEditorial) & "\n"
  Endif
  If Not IsNull(rConsulta!txtRevistaIdioma) Or Trim(rConsulta!txtRevistaIdioma) <> "" Then
    sYAML &= "language: " & Trim(rConsulta!txtRevistaIdioma) & "\n"
  Endif
  If Not IsNull(rConsulta!txtLicencia) Or Trim(rConsulta!txtLicencia) <> "" Then
    sYAML &= "rights: " & Trim(rConsulta!txtLicencia) & "\n"
  Endif
  If Not IsNull(rConsulta!txtLibroSerie) Or Trim(rConsulta!txtLibroSerie) <> "" Then
    sYAML &= "series: " & Trim(rConsulta!txtLibroSerie) & "\n"
  Endif
  If Not IsNull(rConsulta!txtLibroSerieNumero) Or Trim(rConsulta!txtLibroSerieNumero) <> "" Then
    sYAML &= "index: " & Trim(rConsulta!txtLibroSerieNumero) & "\n"
  Endif
  If Not IsNull(rConsulta!txtLibroResumenEs) Or Trim(rConsulta!txtLibroResumenEs) <> "" Then
    sYAML &= "description: " & Trim(rConsulta!txtLibroResumenEs) & "\n"
  Endif

  sYAML &= "identifier:\n"
  sYAML &= "  - scheme: \"ISBN\"\n"
  sYAML &= "    text: " & Trim(rConsulta!txtRevistaISSN) & "\n"
  sYAML &= "  - scheme: \"URI\"\n"
  sYAML &= "    text: " & Trim(rConsulta!txtRevistaURL) & "\n"
  sYAML &= "type: \"Text\"\n"
  sYAML &= "format: \"application/epub+zip\"\n"
  sYAML &= "link-citations: true\n"
  sYAML &= "figureTitle: \"Figura\"\n"
  sYAML &= "tableTitle: \"Cuadro\"\n"
  sYAML &= "listingTitle: \"Listado\"\n"
  sYAML &= "figPrefix:\n"
  sYAML &= "  - \"figura\"\n"
  sYAML &= "  - \"figuras\"\n"
  sYAML &= "eqnPrefix:\n"
  sYAML &= "  - \"ecuación\"\n"
  sYAML &= "  - \"ecuaciones\"\n"
  sYAML &= "tblPrefix:\n"
  sYAML &= "  - \"cuadro\"\n"
  sYAML &= "  - \"cuadros\"\n"
  sYAML &= "lstPrefix:\n"
  sYAML &= "  - \"listado\"\n"
  sYAML &= "  - \"listados\"\n"
  sYAML &= "secPrefix:\n"
  sYAML &= "  - \"sección\"\n"
  sYAML &= "  - \"secciones\"\n"
  sYAML &= "linkReferences: true\n"
  sYAML &= "nameInLink: true\n"
  sYAML &= "figLabels: arabic\n"
  sYAML &= "tblLabels: arabic\n"
  sYAML &= "eqnLabels: arabic\n"
  sYAML &= "ibooks:\n"
  sYAML &= "  version: \"1.0.0\"\n"
  sYAML &= "  specified-fonts: true\n"
  sYAML &= "  iphone-orientation-lock: \"portrait-only\"\n"
  sYAML &= "book-producer: gbpublisher\n"

  ' Guardar el archivo YAML
  Dim outputFile As String
  outputFile = RutaProyecto & "/files/" & BaseNombreProyecto & ".yaml"
  File.Save(outputFile, sYAML)

  iVariosAutores = rConsulta!cmbAutoriaLibro

  ' Obtener el nombre del archivo de tapa
  If IsNull(rConsulta!txtImagenTapita) Or Trim(rConsulta!txtImagenTapita) = "" Then
    sImagenTapa = "cover.png"  ' Valor por defecto
  Else
    sImagenTapa = Trim(rConsulta!txtImagenTapita)
  Endif

  sSQL = "SELECT * FROM revistas WHERE nombre_archivo = &1"
  rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL, sNombreArchivo)

  ' Verificar que la consulta devolvió resultados
  If rConsulta.Available = 0 Then
    Message.Error("No se encontró información para el proyecto: " & sNombreArchivo)
    Return
  Endif

  ' Obtener CSL
  If IsNull(rConsulta!cmbTipoCSL) Or Trim(rConsulta!cmbTipoCSL) = "" Then
    sCSL = "apa.csl"
  Else
    Dim sTextoCompleto As String = Trim(rConsulta!cmbTipoCSL)

    ' Buscar texto entre corchetes
    If InStr(sTextoCompleto, "[") > 0 And InStr(sTextoCompleto, "]") > 0 Then
      sCSL = Replace(Replace(Split(sTextoCompleto, "[")[1], "]", ""), " ", "")
    Else
      sCSL = "apa.csl"
    Endif
  Endif

  ' Construir el comando pandoc
  sComando = BaseNombreProyecto & ".md articulos/*.md"
  sComando &= " --filter pandoc-crossref"
  ' filtros personalizados
  sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/figure-bold-filter.lua"

  ' Condicional para section-refs.lua
  If iVariosAutores = 1 Then
    sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/section-refs.lua"
  Else If iVariosAutores = 0 Then
    sComando &= ""
  Endif

  sComando &= " --citeproc"
  sComando &= " --metadata-file=files/" & BaseNombreProyecto & ".yaml"
  sComando &= " --bibliography=files/" & BaseNombreProyecto & ".bib"
  sComando &= " --csl=" & User.Home & "/.gbadoc/csl/" & sCSL
  sComando &= " --output=salidas/epub/" & BaseNombreProyecto & ".epub"
  sComando &= " --from markdown"
  sComando &= " --to epub3"
  sComando &= " --epub-cover-image=media/" & sImagenTapa
  sComando &= " --css=files/stylesheet1.css"
  sComando &= " --resource-path=" & RutaProyecto & ":" & RutaProyecto &/ "articulos" & ":" & RutaProyecto &/ "media" & ":" & RutaProyecto &/ "files"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgia.ttf"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgiab.ttf"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgiai.ttf"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgiaz.ttf"
  sComando &= " --embed-resources"
  sComando &= " --standalone"
  sComando &= " --toc"
  sComando &= " --toc-depth=0"
  sComando &= " --split-level=1"

  ' Ejecutar pandoc
  FMain.TerminalViewProyecto.Input("pandoc " & sComando & " --verbose --fail-if-warnings" & "\n")
  Wait 0.5

  Dim ArchivoFinal As String
  ArchivoFinal = RutaProyecto & "/salidas/epub/" & BaseNombreProyecto & ".epub"

  ' Ejecutar epubcheck
  FMain.TerminalViewProyecto.Input("epubcheck " & ArchivoFinal & "\n")

End
