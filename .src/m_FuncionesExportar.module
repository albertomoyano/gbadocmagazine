' Gambas module file

Private NombreProyecto As String = File.BaseName(FMain.txtProyecto.Text)
Private RutaProyecto As String = File.Dir(FMain.txtProyecto.Text)

'exportamos el archivo bibtex
Public Sub ExportarBibTeX()

  Dim s As String
  Dim f As ResultField
  Dim aFields As New String[]
  Dim i As Integer
  Dim w As Integer
  Dim tab As String

  Dim sResultado As Result
  Dim filtrarBib As String

  'me aseguro de que la búsqueda se encuentre entre comas
  filtrarBib = "select * from bibtex where id_revista = " & FMain.idMetadatoRevista.Text
  sResultado = m_OnOff_y_Red.meConn.Exec(filtrarBib)

  aFields.Clear
  For Each f In sResultado.Fields
    aFields.Add(f.Name)
    If Len(f.Name) > w Then
      w = Len(f.Name)
    Endif
  Next

  s = "" ' Inicializa la cadena vacía

  While sResultado.Available
    s &= "\n@" & sResultado["cmbTipoDeEntrada"] & "{" & sResultado[aFields[4]] & ",\n"
    For i = 5 To aFields.Max
      If Not IsNull(sResultado[aFields[i]]) And Len(sResultado[aFields[i]]) > 0 Then
        tab = String(w - Len(aFields[i]), " ")
        s &= "  " & aFields[i] & tab & " = {" & sResultado[aFields[i]] & "},\n"
      Endif
    Next

    s &= "}\n"
    sResultado.MoveNext
  Wend

  ' Reemplazos ordenados por longitud descendente de las claves (completo)
  s = Replace(s, "txtBookTitleAddOn", "booktitleaddon")
  s = Replace(s, "txtJournalTitleAddOn", "journaltitleaddon")
  s = Replace(s, "txtMainTitleAddOn", "maintitleaddon")
  s = Replace(s, "txtIssueTitleAddOn", "issuetitleaddon")
  s = Replace(s, "txtEventTitleAddOn", "eventtitleaddon")
  s = Replace(s, "txtBookPagination", "bookpagination")
  s = Replace(s, "txtIndexSortTitle", "indexsorttitle")
  s = Replace(s, "txtShortHandIntro", "shorthandintro")
  s = Replace(s, "cmbEditorTypeC", "editortypec")
  s = Replace(s, "cmbEditorTypeB", "editortypeb")
  s = Replace(s, "cmbEditorTypeA", "editortypea")
  s = Replace(s, "cmbEditorType", "editortype")
  s = Replace(s, "cmbTipoDeTesis", "type")
  s = Replace(s, "cmbOrigLanguage", "origlanguage")
  s = Replace(s, "cmbHyphenation", "hyphenation")
  s = Replace(s, "txtBookAuthor", "bookauthor")
  s = Replace(s, "txtShortAuthor", "shortauthor")
  s = Replace(s, "txtOrigPublisher", "origpublisher")
  s = Replace(s, "txtJournalTitle", "journaltitle")
  s = Replace(s, "txtMainTitle", "maintitle")
  s = Replace(s, "txtBookTitle", "booktitle")
  s = Replace(s, "txtOrigLocation", "origlocation")
  s = Replace(s, "txtIndexTitle", "indextitle")
  s = Replace(s, "txtSubTitle", "subtitle")
  s = Replace(s, "txtTitleAddOn", "titleaddon")
  s = Replace(s, "txtEventTitle", "eventtitle")
  s = Replace(s, "txtIssueTitle", "issuetitle")
  s = Replace(s, "txtShortTitle", "shorttitle")
  s = Replace(s, "txtReprintTitle", "reprinttitle")
  s = Replace(s, "txtPageTotal", "pagetotal")
  s = Replace(s, "txtEntrySubType", "entrysubtype")
  s = Replace(s, "txtForeword", "foreword")
  s = Replace(s, "txtAfterword", "afterword")
  s = Replace(s, "txtPublisher", "publisher")
  s = Replace(s, "txtInstitution", "institution")
  s = Replace(s, "txtTranslator", "translator")
  s = Replace(s, "txtCommentator", "commentator")
  s = Replace(s, "txtIntroduction", "introduction")
  s = Replace(s, "txtAnnotator", "annotator")
  s = Replace(s, "txtAnnotation", "annotation")
  s = Replace(s, "txtHowPublished", "howpublished")
  s = Replace(s, "txtOrganization", "organization")
  s = Replace(s, "txtLandIdOpts", "landidopts")
  s = Replace(s, "txtEntrySet", "entryset")
  s = Replace(s, "txtRelatedString", "relatedstring")
  s = Replace(s, "txtSortTitle", "sorttitle")
  s = Replace(s, "txtSortName", "sortname")
  s = Replace(s, "txtSortYear", "sortyear")
  s = Replace(s, "txtSortHand", "sorthand")
  s = Replace(s, "txtCrossRef", "crossref")
  s = Replace(s, "txtAddendum", "addendum")
  s = Replace(s, "txtXdata", "xdata")
  s = Replace(s, "txtRelated", "related")
  s = Replace(s, "cmbBookPagination", "bookpagination")
  s = Replace(s, "txtNameAddOn", "nameaddon")
  s = Replace(s, "txtVolumes", "volumes")
  s = Replace(s, "txtChapter", "chapter")
  s = Replace(s, "txtLocation", "location")
  s = Replace(s, "txtLanguage", "language")
  s = Replace(s, "cmbLanguage", "language")
  s = Replace(s, "txtEprint", "eprint")
  s = Replace(s, "txtVolume", "volume")
  s = Replace(s, "txtEdition", "edition")
  s = Replace(s, "txtCommentator", "commentator")
  s = Replace(s, "txtTranslator", "translator")
  s = Replace(s, "txtAnnotator", "annotator")
  s = Replace(s, "txtLabel", "label")
  s = Replace(s, "txtPages", "pages")
  s = Replace(s, "txtNumber", "number")
  s = Replace(s, "txtGender", "gender")
  s = Replace(s, "txtHolder", "holder")
  s = Replace(s, "txtAuthor", "author")
  s = Replace(s, "txtEditorC", "editorc")
  s = Replace(s, "txtEditorB", "editorb")
  s = Replace(s, "txtEditorA", "editora")
  s = Replace(s, "txtEditor", "editor")
  s = Replace(s, "txtTitle", "title")
  s = Replace(s, "txtPart", "part")
  s = Replace(s, "txtIssue", "issue")
  s = Replace(s, "txtEventDate", "eventdate")
  s = Replace(s, "txtOrigDate", "origdate")
  s = Replace(s, "txtUrlDate", "urldate")
  s = Replace(s, "txtDate", "date")
  s = Replace(s, "txtYear", "year")
  s = Replace(s, "txtVersion", "version")
  s = Replace(s, "cmbLangId", "langid")
  s = Replace(s, "txtVenue", "venue")
  s = Replace(s, "txtHowPublished", "howpublished")
  s = Replace(s, "txtEid", "eid")
  s = Replace(s, "txtDoi", "doi")
  s = Replace(s, "txtUrl", "url")
  s = Replace(s, "txtIssn", "issn")
  s = Replace(s, "txtIsbn", "isbn")
  s = Replace(s, "txtIsmn", "ismn")
  s = Replace(s, "txtIsrn", "isrn")
  s = Replace(s, "txtIsan", "isan")
  s = Replace(s, "txtIswc", "iswc")
  s = Replace(s, "cmbPubState", "pubstate")
  s = Replace(s, "cmbPagination", "pagination")
  s = Replace(s, "txtAbstract", "abstract")
  s = Replace(s, "txtNote", "note")
  s = Replace(s, "txtLibrary", "library")
  s = Replace(s, "txtFile", "file")
  s = Replace(s, "txtIds", "ids")
  s = Replace(s, "cmbEprintType", "eprinttype")
  s = Replace(s, "cmbRelatedType", "relatedtype")
  s = Replace(s, "txtPreSort", "presort")
  s = Replace(s, "txtSeries", "series")
  s = Replace(s, "txtSortKey", "sortkey")
  s = Replace(s, "txtXref", "xref")
  s = Replace(s, "txtShortHand", "shorthand")
  s = Replace(s, "txtOptions", "options")

  Dim fecha As String

  fecha = Format(Now, "dd/mm/yyyy [hh:nn:ss]")

  s &= "\n\n@Comment{generado con gbadocmagazine; databaseType:biblatex; fecha de creación: " & fecha & "}"

  Dim outputFile As String
  outputFile = RutaProyecto & "/files/" & NombreProyecto & ".bib"
  File.Save(outputFile, s)

End

' Public Sub GenerarEPUBlibroMD()
'
'   Dim sSQL As String
'   Dim sNombreArchivo As String = NombreProyecto
'   Dim rConsulta As Result
'
'   sSQL = "SELECT * FROM revistas WHERE nombre_archivo = &1"
'   rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL, sNombreArchivo)
'
'   ' Obtener de la base de datos
'   Dim iVariosAutores As Integer
'   iVariosAutores = rConsulta!cmbAutoriaLibro
'
'   Dim sComando As String
'   ' Construir el comando pandoc
'   sComando = FMain.NombreProyecto & ".md articulos/*.md"
'   sComando &= " --filter pandoc-crossref"
'   sComando &= " --lua-filter=files/figure-bold-filter.lua"
'   ' Condicional para section-refs.lua
'   If iVariosAutores = 1 Then
'     sComando &= " --lua-filter=files/section-refs.lua"
'   Endif
'   sComando &= " --lua-filter=files/section-refs.lua"
'   sComando &= " --citeproc"
'   sComando &= " --metadata-file=files/" & FMain.NombreProyecto & ".yaml"
'   sComando &= " --bibliography=files/" & FMain.NombreProyecto & ".bib"
'   sComando &= " --csl=files/apa.csl" ' levantar valor de bbdd
'   sComando &= " --output=salidas/epub/" & FMain.NombreProyecto & ".epub"
'   sComando &= " --from markdown"
'   sComando &= " --to epub3"
'   sComando &= " --epub-cover-image=media/cover.png" ' levantar valor de bbdd
'   sComando &= " --css=files/stylesheet1.css"
'   sComando &= " --resource-path=.:articulos:media:files"
'   sComando &= " --epub-embed-font=files/fonts/georgia.ttf"
'   sComando &= " --epub-embed-font=files/fonts/georgiab.ttf"
'   sComando &= " --epub-embed-font=files/fonts/georgiai.ttf"
'   sComando &= " --epub-embed-font=files/fonts/georgiaz.ttf"
'   sComando &= " --embed-resources"
'   sComando &= " --standalone"
'   sComando &= " --toc"
'   sComando &= " --toc-depth=2"
'   sComando &= " --split-level=1"
'
'   FMain.TerminalViewProyecto.Input("pandoc " & sComando & "\n")
'   Wait 0.5
'
'   FMain.TerminalViewProyecto.Input("epubcheck ./salidas/" & FMain.NombreProyecto & ".epub" & "\n")
'
' End Sub

Public Sub GenerarEPUBlibroMD()

  Dim sSQL As String
  Dim sNombreArchivo As String = NombreProyecto
  Dim rConsulta As Result

  sSQL = "SELECT * FROM revistas WHERE nombre_archivo = &1"
  rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL, sNombreArchivo)

  ' Verificar que la consulta devolvió resultados
  If rConsulta.Available = 0 Then
    Message.Error("No se encontró información para el proyecto: " & sNombreArchivo)
    Return
  Endif

  ' Obtener valores de la base de datos
  Dim iVariosAutores As Integer
  Dim sImagenTapa As String
  Dim sCSL As String

  iVariosAutores = rConsulta!cmbAutoriaLibro

  ' Obtener el nombre del archivo de tapa
  If IsNull(rConsulta!txtImagenTapita) Or Trim(rConsulta!txtImagenTapita) = "" Then
    sImagenTapa = "cover.png"  ' Valor por defecto
  Else
    sImagenTapa = Trim(rConsulta!txtImagenTapita)
  Endif

  ' Obtener el valor del CSL
  If IsNull(rConsulta!cmbTipoCSL) Or Trim(rConsulta!cmbTipoCSL) = "" Then
    sCSL = "apa.csl"  ' Valor por defecto
  Else
    sCSL = Trim(rConsulta!cmbTipoCSL)  ' Valor desde BD
  Endif

  Dim sComando As String
  ' Construir el comando pandoc
  sComando = FMain.NombreProyecto & ".md articulos/*.md"
  sComando &= " --filter pandoc-crossref"
  ' filtros personalizados
  sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/figure-bold-filter.lua"
  '
  ' Condicional para section-refs.lua
  If iVariosAutores = 1 Then
    sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/files/section-refs.lua"
  Else If iVariosAutores = 0 Then
    sComando &= ""
  Endif
  '
  sComando &= " --citeproc"
  sComando &= " --metadata-file=files/" & FMain.NombreProyecto & ".yaml"
  sComando &= " --bibliography=files/" & FMain.NombreProyecto & ".bib"
  sComando &= " --csl=files/" & sCSL
  sComando &= " --output=salidas/epub/" & FMain.NombreProyecto & ".epub"
  sComando &= " --from markdown"
  sComando &= " --to epub3"
  sComando &= " --epub-cover-image=media/" & sImagenTapa
  sComando &= " --css=files/stylesheet1.css"
  sComando &= " --resource-path=.:articulos:media:files"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgia.ttf"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgiab.ttf"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgiai.ttf"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgiaz.ttf"
  sComando &= " --embed-resources"
  sComando &= " --standalone"
  sComando &= " --toc"
  sComando &= " --toc-depth=2"
  sComando &= " --split-level=1"

  FMain.TerminalViewProyecto.Input("pandoc " & sComando & "\n")
  Wait 0.5
  FMain.TerminalViewProyecto.Input("epubcheck ./salidas/epub/" & FMain.NombreProyecto & ".epub" & "\n")

End Sub

Public Sub GenerarKindlelibroMD()

  Dim sComando As String

  ' Comando para convertir EPUB a AZW3 (formato Kindle moderno)
  sComando = "ebook-convert ./salidas/epub/" & FMain.NombreProyecto & ".epub ./salidas/kindle/" & FMain.NombreProyecto & ".azw3"

  FMain.TerminalViewProyecto.Input(sComando & "\n")
  Wait 0.5

End Sub
