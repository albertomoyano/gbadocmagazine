' Gambas class file

Private autocompletados As New Collection
Private NombreProyecto As String
Private RutaProyecto As String
Public $Bash As Process
Public ContenidoBib As Result
Public ContenidoArt As Result

Public Sub Form_Open()

  'creamos el directorio oculto del programa y revisamos la BBDD
  m_InicioCierre.DirectorioOcultoApp()

  ' abrimos la conexión a la red
  m_OnOff_y_Red.OnRed

  ' habilitamos bash en la terminal
  $Bash = TerminalViewProyecto.Shell("/usr/bin/bash")

  TextAreaProyecto.Visible = True
  PictureBoxProyecto.Visible = False
  PictureBoxProyecto.Picture = Null

End

Public Sub DirViewProyecto_Click()' Evento click en DirView actualiza los archivos que se muestran en FileViewProyecto

  Dim bloquear As Boolean = False

  If Not bloquear Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

End

Public Sub Watcher_Change()' Evento que se ejecuta cuando se detecta un cambio en el directorio

  DirViewProyecto.Root = File.Dir(txtProyecto.Text)' reforzamos la indicación de la ruta
  DirViewProyecto.Refresh
  FileViewProyecto.Refresh

End

Public Sub btnVerProyectos_Click()' Cambiar visibilidad del TabPanel2 según el estado del botón

  If btnVerProyectos.Value Then
    ' Verificar si hay un proyecto seleccionado (filtro)
    If Trim(txtProyecto.Text) = "" Then
      ' No hay proyecto seleccionado, mostrar advertencia
      Message.Warning("No tiene ningún proyecto seleccionado.\nSe abrirá el gestor para seleccionar uno.", "Aceptar")

      ' Desactivar el botón ya que no se puede mostrar el panel
      btnVerProyectos.Value = False

      ' Llamar al procedimiento para abrir un proyecto
      ButtonAbrirProyecto_Click()
      Return
    End If

    ' Si hay proyecto seleccionado, mostrar el panel
    PanelProyectos.Visible = True
  Else
    ' Ocultar el panel
    PanelProyectos.Visible = False
  End If

End Sub

Public Sub ButtonAbrirProyecto_Click()

  Dialog.Title = "Seleccionar archivo"
  Dialog.Filter = ["*.adoc", "Archivos de Asciidoc,"]
  Dialog.AutoExt = True
  Dialog.Path = User.Home

  If Dialog.OpenFile() Then
    Return
  Else
    m_InicioCierre.VerificarYAgregarProyecto(File.BaseName(Dialog.Path))
    ' ahora refrescamos el nombre del archivo nuevo
    txtProyecto.Text = Dialog.Path
    NombreProyecto = File.BaseName(Dialog.Path)
    RutaProyecto = File.Dir(txtProyecto.Text)
    '
    Shell Quote$("rm -rf " & User.Home & "/.local/share/org.gambas.*") & "\n" Wait
    ControlarCarpetas()' nos aseguramos revisar las carpetas del proyecto
    m_Metadatos.CargarMetadatosDesdeArchivo(NombreProyecto)
    '
    ContenidoArt = m_OnOff_y_Red.meConn.Exec("SELECT * FROM articulos WHERE id_revistas = &1", FMain.idMetadatoRevista.Text)
    gbMetadatosArticulos.Rows.Count = ContenidoArt.Count
    gbMetadatosArticulos.Refresh
    m_Articulos.ConfigurarTableViewArticulos(gbMetadatosArticulos)
    m_Articulos.RefrescarTableViewArticulos()
    m_Autores.LlenarComboBoxArticulos()
    '
    ContenidoBib = m_OnOff_y_Red.meConn.Exec("SELECT * FROM bibtex WHERE id_revistas = &1", FMain.idMetadatoRevista.Text)
    gvReferenciasEnCurso.Rows.Count = ContenidoBib.Count
    gvReferenciasEnCurso.Refresh
    m_Bibtex.ConfigurarTableViewBibtexEnCurso(gvReferenciasEnCurso)
    m_Bibtex.RefrescarTableViewBibtexEnCurso()
    m_Bibtex.RellenarComboBoxBibTeX()
    '
    LevantarTitulosCSL()
    MenuButtonSalidas.Visible = True
    TabPanelMetadatosRevista.Visible = True
    TerminalViewProyecto.Input("cd " & RutaProyecto & "\n")
    TerminalViewProyecto.Input("clear" & "\n")
    PictureBoxProyecto.Image = Null
    DirViewProyecto.Root = File.Dir(txtProyecto.Text)
    DirViewProyecto.Reload' hacemos un refresco luego de aseguramos de que las carpetas fueron revisadas
    FileViewProyecto.Refresh
  Endif

End

Public Sub ControlarCarpetas()' Lista de directorios que se deben confirmar al abrir

  Dim directorios As String[] = ["articulos", "files", "media", "correcciones", "originales", "salidas", "salidas/tapa", ".github", ".github/workflows"]

  ' Crear los directorios si no existen
  For Each directorio As String In directorios
    If Not Exist(File.Dir(txtProyecto.Text) & "/" & directorio) Then
      Mkdir File.Dir(txtProyecto.Text) & "/" & directorio
    End If
  Next

End

Public Sub Form_Close()

  m_InicioCierre.CerrarTodo()

End

Public Sub btnCrearCarpeta_Click()

  If DirViewProyecto.Current = "" Then
    Message.Warning("Seleccioná un directorio en el árbol primero.")
    Return
  Endif

  ' Guardamos la ruta actual como destino
  f_AgregarCarpeta.RutaDestino = DirViewProyecto.Current
  f_AgregarCarpeta.ShowModal

  ' Si se creó la carpeta, actualizamos el FileView
  If f_AgregarCarpeta.CarpetaCreada Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

  DirViewProyecto.Reload

End

Public Sub btnBorrarCarpeta_Click()

  Dim ruta As String = DirViewProyecto.Current

  ' Verificar que la ruta existe y es una carpeta
  If Not Exist(ruta) Or Not IsDir(ruta) Then
    Message.Warning("La ruta seleccionada no es una carpeta válida.")
    Return
  End If

  ' Confirmar acción
  If Message.Question("¿Seguro que deseas borrar la carpeta y TODO su contenido, incluyendo subcarpetas y archivos?", "Sí", "Cancelar") <> 1 Then
    Return
  End If

  ' Intentar borrar la carpeta
  If BorrarCarpeta(ruta) Then
    DirViewProyecto.Reload
    Message.Info("Carpeta borrada exitosamente.")
  Else
    Message.Error("No se pudo borrar la carpeta completamente.")
  End If

End

Private Function BorrarCarpeta(RutaCarpeta As String) As Boolean

  Dim archivos As String[]
  Dim archivo As String
  Dim rutaCompleta As String

  ' Obtener lista de archivos y carpetas
  Try archivos = Dir(RutaCarpeta, "*", gb.File + gb.Directory)
  If Error Then
    Print "Error al leer carpeta: " & RutaCarpeta & " - " & Error.Text
    Return False
  End If

  ' Procesar cada elemento
  For Each archivo In archivos
    ' Saltar las entradas "." y ".."
    If archivo = "." Or archivo = ".." Then Continue

    rutaCompleta = RutaCarpeta &/ archivo

    If IsDir(rutaCompleta) Then
      ' Es una subcarpeta, llamada recursiva
      If Not BorrarCarpeta(rutaCompleta) Then
        Return False
      End If
    Else
      ' Es un archivo, borrarlo
      Try Kill rutaCompleta
      If Error Then
        Print "Error al borrar archivo: " & rutaCompleta & " - " & Error.Text
        Return False
      End If
    End If
  Next

  ' Finalmente, borrar la carpeta vacía
  Try Rmdir RutaCarpeta
  If Error Then
    Print "Error al borrar carpeta: " & RutaCarpeta & " - " & Error.Text
    Return False
  End If

  Return True

End Function

Public Sub btnAgregarArchivo_Click()' Evento para agregar archivo
  ' Mostrar formulario de creación

  f_AgregarArchivo.RutaDestino = DirViewProyecto.Current
  f_AgregarArchivo.ShowModal
  ' Si se creó, actualizamos la vista
  If f_AgregarArchivo.ArchivoCreado Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

  FileViewProyecto.Reload

End

Public Sub btnBorrarArchivo_Click()

  Dim archivoSeleccionado As String
  Dim rutaCompleta As String
  Dim respuesta As Integer

  ' Verificar que hay un archivo seleccionado
  If FileViewProyecto.Current = "" Then
    Message.Warning("No hay ningún archivo seleccionado")
    Return
  Endif

  ' Obtener el archivo seleccionado y su ruta completa
  archivoSeleccionado = FileViewProyecto.Current
  rutaCompleta = FileViewProyecto.Dir &/ archivoSeleccionado

  ' Mostrar alerta de confirmación
  respuesta = Message.Question("¿Está seguro que desea eliminar el archivo '" & archivoSeleccionado & "'?", "Eliminar", "Cancelar")

  ' Si confirma (OK), eliminar el archivo
  If respuesta = 1 Then
    Kill rutaCompleta
    If Error Then
      Message.Error("Error al eliminar el archivo: " & Error.Text)
    Else
      Message.Info("Archivo eliminado correctamente")
      ' Refrescar la vista
      FileViewProyecto.Reload
    Endif
  Endif

End

Public Sub btnVerIMAGEN_Click()

  Dim sArchivoSeleccionado As String
  Dim sRutaCompleta As String
  Dim sExtension As String
  Dim aExtensionesImagen As String[]

  ' Definir las extensiones de imagen permitidas
  aExtensionesImagen = ["png", "jpg", "jpeg", "gif", "bmp", "tiff", "tif", "webp"]

  ' Verificar que hay un archivo seleccionado en el FileView
  If FileViewProyecto.Current = "" Then
    Message.Warning("Por favor seleccione un archivo de la lista")
    Return
  Endif

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current

  ' Construir la ruta completa del archivo
  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Endif

  ' Obtener la extensión del archivo
  sExtension = LCase(File.Ext(sArchivoSeleccionado))

  ' Verificar que es un archivo de imagen válido
  If aExtensionesImagen.Find(sExtension) = -1 Then
    Message.Warning("El archivo seleccionado no es una imagen válida.\nExtensiones permitidas: ." & aExtensionesImagen.Join(", ."))
    Return
  Endif

  ' Cargar y mostrar la imagen
  Try PictureBoxProyecto.Picture = Picture.Load(sRutaCompleta)

  If Error Then
    ' Si hay error al cargar la imagen
    PictureBoxProyecto.Picture = Null
    PictureBoxProyecto.Visible = False
    TextAreaProyecto.Visible = True
  Else
    ' Si la imagen se cargó correctamente
    PictureBoxProyecto.Visible = True
    TextAreaProyecto.Visible = False
  Endif

  If Error Then
    Message.Error("Error al cargar la imagen:\n" & Error.Text)
    ' Limpiar el ImageView en caso de error
    PictureBoxProyecto.Picture = Null
  Endif

End

Public Sub btnVerTexto_Click()

  Dim sArchivoSeleccionado As String
  Dim sRutaCompleta As String
  Dim sExtension As String
  Dim aExtensionesPermitidas As String[]

  ' Definir las extensiones de archivos de texto permitidas
  aExtensionesPermitidas = ["adoc", "txt", "sh", "css", "js", "json", "xml", "md", "log", "conf", "cfg", "ini", "csl", "sass"]

  ' Verificar que hay un archivo seleccionado en el FileView
  If FileViewProyecto.Current = "" Then
    Message.Warning("Por favor seleccione un archivo de la lista")
    Return
  Endif

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current
  ' Construir la ruta completa del archivo
  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Endif

  ' Obtener la extensión del archivo
  sExtension = LCase(File.Ext(sArchivoSeleccionado))

  ' Verificar que es un archivo de texto válido
  If aExtensionesPermitidas.Find(sExtension) = -1 Then
    Message.Warning("El archivo seleccionado no es un archivo de texto válido.\nExtensiones permitidas: " & aExtensionesPermitidas.Join(", "))
    Return
  Endif

  ' Cargar el contenido del archivo de texto
  Try TextAreaProyecto.Text = File.Load(sRutaCompleta)

  If Error Then
    ' Si hay error al cargar el archivo
    TextAreaProyecto.Text = ""
    PictureBoxProyecto.Visible = True
    TextAreaProyecto.Visible = False
    Message.Error("Error al cargar el archivo de texto:\n" & Error.Text)
  Else
    ' Si el texto se cargó correctamente
    PictureBoxProyecto.Visible = False
    TextAreaProyecto.Visible = True
  Endif

End

Public Sub btnVerTextoExterno_Click()

  Dim sArchivoSeleccionado As String
  Dim sRutaCompleta As String
  Dim sExtension As String
  Dim aExtensionesPermitidas As String[]

  ' Definir las extensiones de archivos de texto permitidas
  aExtensionesPermitidas = ["adoc", "xml", "doc", "docx", "rtf"]

  ' Verificar que hay un archivo seleccionado en el FileView
  If FileViewProyecto.Current = "" Then
    Message.Warning("Por favor seleccione un archivo de la lista")
    Return
  Endif

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current

  ' Construir la ruta completa del archivo
  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Endif

  ' Obtener la extensión del archivo
  sExtension = LCase(File.Ext(sArchivoSeleccionado))

  ' Verificar que es un archivo de texto válido
  If aExtensionesPermitidas.Find(sExtension) = -1 Then
    Message.Warning("El archivo seleccionado no es un archivo de texto válido.\nExtensiones permitidas: " & aExtensionesPermitidas.Join(", "))
    Return
  Endif

  ' Abrir el archivo de texto
  Try Desktop.Open(sRutaCompleta)

  ' Verificar si ocurrió un error
  If Error Then
    Message.Error("Error al abrir el archivo de texto:\n" & Error.Text)
  Endif

End

Public Sub menuEPUB_Click()

  If Not Exist(File.Dir(txtProyecto.Text) & "/salidas/epub") Then
    Mkdir File.Dir(txtProyecto.Text) & "/salidas/epub"
    DirViewProyecto.Reload
  End If

  ' hacemos una consulta a la BBDD y obtenemos los metadatos

  ' hacemos otra consulta a la bbdd y obteneos el archivo .bib

  'generamos el epub3
  ' Dim sCommand As String
  ' sCommand = "asciidoctor-epub3 salidas/epub mi-documento.adoc"
  ' Shell sCommand Wait

End

Public Sub menuPDFcompleto_Click()

  If Not Exist(File.Dir(txtProyecto.Text) & "/salidas/pdf") Then
    Mkdir File.Dir(txtProyecto.Text) & "/salidas/pdf"
    DirViewProyecto.Reload
  End If

End

Public Sub menuHTMLcompleto_Click()

  If Not Exist(File.Dir(txtProyecto.Text) & "/salidas/html") Then
    Mkdir File.Dir(txtProyecto.Text) & "/salidas/html"
    DirViewProyecto.Reload
  End If

End

Public Sub menuDocBook_Click()

  If Not Exist(File.Dir(txtProyecto.Text) & "/salidas/docbook") Then
    Mkdir File.Dir(txtProyecto.Text) & "/salidas/docbook"
    DirViewProyecto.Reload
  End If

End

Public Sub menuXMLpmd_Click()

  If Not Exist(File.Dir(txtProyecto.Text) & "/salidas/xml") Then
    Mkdir File.Dir(txtProyecto.Text) & "/salidas/xml"
    DirViewProyecto.Reload
  End If

End

Public Sub menuSCIELO_Click()

  If Not Exist(File.Dir(txtProyecto.Text) & "/salidas/xml") Then
    Mkdir File.Dir(txtProyecto.Text) & "/salidas/xml"
    DirViewProyecto.Reload
  End If

End

Public Sub btnBlockNotas_Click()

  f_BlockNotas.ShowModal()

End

Public Sub ButtonCerrarAplicacion_Click()

  m_InicioCierre.CerrarTodo()

End

Public Sub btnConversorWord_Click()

  f_Conversor.ShowModal()

End

Public Sub btnGuardarCambiosMetadatosRevista_Click()

  m_Metadatos.GuardarMetadatos()

End

Public Sub btnNuevoArticulo_Click()

  m_Articulos.ObtenerIdNuevoArticulo()

  btnNuevoArticulo.Visible = False
  btnGuardarArticulo.Visible = True
  btnGuardarCambiosArticulo.Visible = False
  btnBorrarArticulo.Visible = False

End

Public Sub btnGuardarArticulo_Click()

  m_Articulos.GuardarArticuloPrimeraVez()
  m_Articulos.RefrescarTableViewArticulos()
  m_Autores.LlenarComboBoxArticulos()

  gbMetadatosArticulos.Refresh()

  btnNuevoArticulo.Visible = True
  btnGuardarArticulo.Visible = False
  btnGuardarCambiosArticulo.Visible = True
  btnBorrarArticulo.Visible = False

End

Public Sub btnGuardarCambiosArticulo_Click()

  m_Articulos.GuardarCambiosArticulo()
  m_Articulos.RefrescarTableViewArticulos()
  m_Autores.LlenarComboBoxArticulos()
  gbMetadatosArticulos.Refresh()

  btnNuevoArticulo.Visible = True
  btnGuardarArticulo.Visible = False
  btnGuardarCambiosArticulo.Visible = False
  btnBorrarArticulo.Visible = False

End

Public Sub gbMetadatosArticulos_Data(Row As Integer, Column As Integer)

  If (ContenidoArt <> Null) Then
    If Row >= 0 And Row < ContenidoArt.Count Then
      ContenidoArt.MoveTo(Row)
      Try gbMetadatosArticulos.Data.Text = Str(ContenidoArt[Column])
    Endif
  Endif

  ' Color alternado para las filas
  If Row Mod 2 = 0 Then
    gbMetadatosArticulos.Data.Background = Color.RGB(230, 230, 230)
  Else
    gbMetadatosArticulos.Data.Background = Color.White
  Endif

End

Public Sub gbMetadatosArticulos_Click()

  ' configurar como se muestran los botones
  btnNuevoArticulo.Visible = True
  btnGuardarArticulo.Visible = False
  btnGuardarCambiosArticulo.Visible = True
  btnBorrarArticulo.Visible = True

  m_Articulos.MostrarArticulosEnTableViewArticulos(gbMetadatosArticulos.row)' en el evento Click de la celda pasar como parámetro la fila

End

Public Sub btnNuevoAutor_Click()

  m_Autores.ObtenerIdNuevoAutor()

End

Public Sub ComboBoxArticuloAsociado_Click()

  m_Autores.ComboBoxArticuloAsociado()

End

Public Sub gvReferenciasEnCurso_Data(Row As Integer, Column As Integer)

  If (ContenidoBib <> Null) Then
    If Row >= 0 And Row < ContenidoBib.Count Then
      ContenidoBib.MoveTo(Row)
      Try gvReferenciasEnCurso.Data.Text = Str(ContenidoBib[Column])
    Endif
  Endif

  ' Color alternado para las filas
  If Row Mod 2 = 0 Then
    gvReferenciasEnCurso.Data.Background = Color.RGB(230, 230, 230)
  Else
    gvReferenciasEnCurso.Data.Background = Color.White
  Endif

End

Public Sub gvReferenciasEnCurso_Click()

  ' configurar como se muestran los botones
  BtnNuevoBib.Visible = True
  btnGuardarBib.Visible = False
  btnGuardarCambiosBib.Visible = True
  BtnEliminarBib.Visible = True

  m_Bibtex.MostrarRefereciasEnTableViewBibtexEnCurso(gvReferenciasEnCurso.row)' en el evento Click de la celda pasar como parámetro la fila

End

Public Sub BtnNuevoBib_Click()

  m_Bibtex.ObtenerIdNuevoBibtex()
  m_Bibtex.LimpiarCamposBIB()
  m_Bibtex.RellenarComboBoxBibTeX()
  m_Bibtex.RefrescarTableViewBibtexEnCurso()

End

Public Sub btnGuardarBib_Click()

  m_Bibtex.GuardarBibtexPrimeraVez()
  m_Bibtex.RellenarComboBoxBibTeX()
  m_Bibtex.RefrescarTableViewBibtexEnCurso()

End

Public Sub btnGuardarCambiosBib_Click()

  m_Bibtex.GuardarCambiosEnBibtex()
  m_Bibtex.RellenarComboBoxBibTeX()
  gvReferenciasEnCurso.Refresh()

End

Public Sub cmbTipoDeEntrada_Click()

  If cmbTipoDeEntrada.Text = "thesis" Then
    hbTesis.Visible = True
  Else
    hbTesis.Visible = False
    ' Limpiar el ComboBox cuando se oculta
    cmbTipoDeTesis.Text = ""
    cmbTipoDeTesis.Index = -1
  Endif

End

Public Sub LevantarTitulosCSL()

  Dim sDirectorio As String = User.Home & "/.gbadoc/csl"
  Dim aArchivos As String[]
  Dim sArchivo, sRutaCompleta, sPrimeraLinea, sNombreVisible As String
  Dim hArchivo As File

  FMain.cmbTipoCSL.Clear()

  If Not Exist(sDirectorio) Then
    Message.Warning("El directorio " & sDirectorio & " no existe")
    Return
  Endif

  aArchivos = Dir(sDirectorio, "*.csl", gb.File)

  For Each sArchivo In aArchivos
    sRutaCompleta = sDirectorio &/ sArchivo
    sNombreVisible = sArchivo  ' Valor por defecto

    If Exist(sRutaCompleta) Then
      hArchivo = Open sRutaCompleta For Input
      If hArchivo Then
        Line Input #hArchivo, sPrimeraLinea
        Close #hArchivo

        ' Extraer texto entre <!-- Título: ... -->
        If InStr(sPrimeraLinea, "<!-- Título:") Then
          sNombreVisible = Trim(Mid(sPrimeraLinea, InStr(sPrimeraLinea, ":") + 1))
          sNombreVisible = Replace(sNombreVisible, "-->", "") ' Por si está todo en la misma línea
          sNombreVisible = Trim(sNombreVisible)
        Endif
      Endif
    Endif

    ' Mostrar título y archivo como referencia (opcional)
    FMain.cmbTipoCSL.Add(sNombreVisible & " [" & sArchivo & "]")
  Next

Catch
  Message.Error("Error al leer los títulos CSL: " & Error.Text)

End

Public Sub btnGenerarClaveBib_Click()

  m_Bibtex.AgregarClaveBib()

End

Public Sub btnVerificarURL_Click()

  m_FuncionesGenericas.VerificarURLDesdeCampo(txtUrl)

End

Public Sub btnVerificarDOI_Click()

  m_FuncionesGenericas.VerificarDOI(txtDoi)

End

Public Sub btnChequearISBN_Click()

  Dim ISBN As String = txtISBN.Text

  If m_FuncionesGenericas.EsISBNValido(ISBN) Then
    Message.Info("El ISBN es válido.")
  Else
    Message.Warning("El ISBN no es válido.")
  End If

End

Public Sub btnChequearISSN_Click()

  Dim sISSN As String
  Dim sURL As String

  ' Obtener el texto del TextBox
  sISSN = txtIssn.Text

  ' Verificar que no esté vacío
  If Trim(sISSN) = "" Then
    Message.Error("Por favor, introduce un ISSN para buscar")
    Return
  Endif

  ' Validar formato ISSN y dígito de control
  If Not m_FuncionesGenericas.IsValidISSN(sISSN) Then
    Message.Error("El ISSN no es válido. Debe tener el formato XXXX-XXXX o XXXXXXXX y pasar la validación del dígito de control.")
    Return
  Endif

  ' Construir la URL de búsqueda para el portal ISSN
  ' $URL = "https://scholar.google.com/scholar?q=" & URL.Encode(sISSN)
  sURL = "https://portal.issn.org/resource/ISSN/" & Replace(sISSN, "-", "")

  ' Abrir la URL en el navegador predeterminado
  Desktop.Open(sURL)

End

Public Sub btnBuscarGoogle_Click()

  Dim sURL As String = Trim(txtUrl.Text)

  ' Verificar que no esté vacío
  If Trim(sURL) = "" Then
    Message.Error("Por favor, introduce un URL.")
    Return
  Endif

  ' Abrir la URL en el navegador predeterminado
  Desktop.Open(sURL)

End

Public Sub BtnBuscarAuthor_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtAuthor, gvReferenciasEnCurso)

End

Public Sub BtnBuscarBookAuthor_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtBookAuthor, gvReferenciasEnCurso)

End

Public Sub BtnBuscarEditor_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtEditor, gvReferenciasEnCurso)

End

Public Sub BtnBuscarTituloReferencia_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtTitle, gvReferenciasEnCurso)

End

Public Sub BtnBuscarBookTitle_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtBookTitle, gvReferenciasEnCurso)

End

Public Sub BtnBuscarMainTitle_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtMainTitle, gvReferenciasEnCurso)

End

' Ocultar el ComboBox cuando se hace clic en el formulario
Public Sub Form_Click()

  ComboBoxPublisher.Visible = False
  ComboBoxInstitution.Visible = False
  ComboBoxOrganization.Visible = False

End

Public Sub ButtonMostrarAbstract_Click()

  f_TXTextendido.OriginalTextBox = txtAbstract
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarNote_Click()

  f_TXTextendido.OriginalTextBox = txtNote
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarLibrary_Click()

  f_TXTextendido.OriginalTextBox = txtLibrary
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarAnnotation_Click()

  f_TXTextendido.OriginalTextBox = txtAnnotation
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarFile_Click()

  f_TXTextendido.OriginalTextBox = txtFile
  f_TXTextendido.ShowModal

End

' Método adicional para manejar cuando el usuario hace clic fuera del combo
Public Sub txtPublisher_GotFocus()
  ' Opcional: mostrar todos los resultados cuando el textbox obtiene el foco

  If Trim(txtPublisher.Text) <> "" Then
    m_FuncionesGenericas.BuscarEditorialDesdeTexto()
  Endif

End

' Método adicional para manejar cuando el usuario hace clic fuera del combo
Public Sub txtInstitution_GotFocus()
  ' Opcional: mostrar todos los resultados cuando el textbox obtiene el foco

  If Trim(txtInstitution.Text) <> "" Then
    m_FuncionesGenericas.BuscarInstitucionDesdeTexto()
  Endif

End

' Ocultar el ComboBox cuando el TextBox pierde el foco
Public Sub txtPublisher_LostFocus()
  ' Usar un Timer para dar tiempo a que se procese el click del ComboBox

  TimerPublisher.Delay = 100
  TimerPublisher.Start()

End

' Ocultar el ComboBox cuando el TextBox pierde el foco
Public Sub txtInstitution_LostFocus()
  ' Usar un Timer para dar tiempo a que se procese el click del ComboBox

  TimerInstitution.Delay = 100
  TimerInstitution.Start()

End

' Timer para ocultar el ComboBox después de perder el foco
Public Sub TimerPublisher_Timer()

  TimerPublisher.Stop()
  ComboBoxPublisher.Visible = False

End

' Timer para ocultar el ComboBox después de perder el foco
Public Sub TimerInstitution_Timer()

  TimerInstitution.Stop()
  ComboBoxInstitution.Visible = False

End

' Timer para ocultar el ComboBox después de perder el foco
Public Sub TimerOrganization_Timer()

  TimerOrganization.Stop()
  ComboBoxOrganization.Visible = False

End

Public Sub BtnBuscarClaveBib_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtClaveBibtex, gvReferenciasEnCurso)

End

Public Sub txtPublisher_KeyPress()

  If Key.Code = Key.Enter Or Key.Code = Key.Return Then
    m_FuncionesGenericas.BuscarEditorialDesdeTexto()
  Endif

End

Public Sub txtInstitution_KeyPress()

  If Key.Code = Key.Enter Or Key.Code = Key.Return Then
    m_FuncionesGenericas.BuscarInstitucionDesdeTexto()
  Endif

End

Public Sub txtOrganization_KeyPress()

  If Key.Code = Key.Enter Or Key.Code = Key.Return Then
    m_FuncionesGenericas.BuscarOrganizationDesdeTexto()
  Endif

End

Public Sub ComboBoxPublisher_Click()' Capturar la selección del ComboBox

  If ComboBoxPublisher.Index >= 0 Then
    txtPublisher.Text = ComboBoxPublisher.Text
    ComboBoxPublisher.Visible = False
  Endif

End

Public Sub ComboBoxInstitution_Click()' Capturar la selección del ComboBox

  If ComboBoxInstitution.Index >= 0 Then
    txtInstitution.Text = ComboBoxInstitution.Text
    ComboBoxInstitution.Visible = False
  Endif

End

Public Sub ComboBoxOrganization_Click()' Capturar la selección del ComboBox

  If ComboBoxOrganization.Index >= 0 Then
    txtOrganization.Text = ComboBoxOrganization.Text
    ComboBoxOrganization.Visible = False
  Endif

End
